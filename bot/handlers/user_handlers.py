import os
from aiogram import Router, types, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from keyboards import SERVICES, main_menu, faq_menu_markup, service_pagination_markup
from config import ADMIN_IDS
from services import add_booking

router = Router()


class Booking(StatesGroup):
    waiting_for_phone = State()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    text = """
üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –¥–ª—è –õ—é–¥–µ–π –∏ –ë–∏–∑–Ω–µ—Å–∞! üåü

üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≥–æ–≤–æ—Ä—è—â–∏—Ö –∏ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –≤–∞–º–∏ –ê–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π, —á–∞—Ç-–±–æ—Ç–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –∏ –æ–±—É—á–∞—é—â–∏—Ö –∫—É—Ä—Å–æ–≤.

üé• –ê–Ω–∏–º–∞—Ü–∏—è: –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ 3D, —É—Å–ª—É–≥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

üåü –ü—Ä–æ–¥–∞–∫—à–Ω –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏ –ª–∏—á–Ω—ã—Ö –≤–∏–¥–µ–æ-–≤–∏–∑–∏—Ç–æ–∫.
    """
    await message.answer(text=text, reply_markup=main_menu())


@router.message(lambda m: m.text == "üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏")
async def about_company(message: types.Message):
    text = """
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏]!

–ú—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç—ã –≤ —Å—Ñ–µ—Ä–µ IT, —Å–æ–∑–¥–∞–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.

üîπ –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º:
‚Äî –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±- –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π  
‚Äî –û–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏  
‚Äî –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å  
‚Äî IT-–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üîπ –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Äî –ë–æ–ª–µ–µ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞  
‚Äî –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤  
‚Äî –†–µ—à–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏

‚ú® –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç!
    """
    await message.answer(text, reply_markup=main_menu(show_website=True))


@router.message(lambda m: m.text == "üìö FAQ")
async def faq_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=faq_menu_markup())


@router.message(lambda m: m.text and m.text.startswith("–í–æ–ø—Ä–æ—Å"))
async def faq_answer(message: types.Message):
    video_map = {
        "–í–æ–ø—Ä–æ—Å 1": "videos/video_2025-05-29_14-37-40.mp4",
        "–í–æ–ø—Ä–æ—Å 2": "videos/video_2025-05-29_14-37-46.mp4",
    }

    path = video_map.get(message.text)
    if path and os.path.exists(path):
        video_file = FSInputFile(path)
        await message.answer_video(video=video_file, caption=message.text)
    else:
        await message.answer("–í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")


@router.message(lambda m: m.text == "üõéÔ∏è –£—Å–ª—É–≥–∏")
async def services_list(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(idx=0)
    await _send_service(message.chat.id, state, bot)


async def _send_service(chat_id: int, state: FSMContext, bot: Bot):
    data = await state.get_data()
    idx = data.get("idx", 0)
    service = SERVICES[idx]
    markup = service_pagination_markup(idx, len(SERVICES))
    await bot.send_message(chat_id, service, reply_markup=markup)


@router.callback_query(lambda c: c.data in ("prev_service", "next_service", "book_service"))
async def service_navigation(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    idx = data.get("idx", 0)

    if callback.data == "prev_service":
        idx = (idx - 1) % len(SERVICES)
    elif callback.data == "next_service":
        idx = (idx + 1) % len(SERVICES)
    elif callback.data == "book_service":
        await state.set_state(Booking.waiting_for_phone)
        await callback.message.answer("üìû–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8):\n–ü—Ä–∏–º–µ—Ä: 89999999999")
        await callback.answer()
        return

    await state.update_data(idx=idx)
    await callback.message.edit_text(SERVICES[idx], reply_markup=service_pagination_markup(idx, len(SERVICES)))
    await callback.answer()


@router.message(StateFilter(Booking.waiting_for_phone))
async def process_phone(message: types.Message, state: FSMContext, bot: Bot):
    phone = message.text.strip()
    if not (phone.isdigit() and len(phone) == 11 and phone.startswith("8")):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8.")

    data = await state.get_data()
    idx = data.get("idx")
    service = SERVICES[idx]
    username = message.from_user.username or ""
    add_booking(service, username, phone)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    await state.clear()


@router.message(lambda m: m.text == "üìû –°–≤—è–∑—å —Å –Ω–∞–º–∏")
async def contact_us(message: types.Message):
    contact_text = (
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 999 99 99\n"
        "‚úâÔ∏è Email: info@example.com\n"
        "üåê –°–æ—Ü—Å–µ—Ç–∏: https://t.me/yourchannel\n\n"
    )

    if not ADMIN_IDS:
        admins_text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."
    else:
        admins_text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏:\n"
        for admin_id in ADMIN_IDS:
            try:
                chat = await message.bot.get_chat(admin_id)
                if chat.username:
                    admins_text += f"@{chat.username}\n"
                else:
                    admins_text += f"–ú–µ–Ω–µ–¥–∂–µ—Ä {admin_id} (–Ω–µ—Ç username)\n"
            except Exception as e:
                admins_text += f"–ú–µ–Ω–µ–¥–∂–µ—Ä {admin_id} (–æ—à–∏–±–∫–∞: {e})\n"

    await message.answer(contact_text + admins_text)



@router.message(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def go_back_to_main_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(lambda m: m.text == "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")
async def open_website(message: types.Message):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç üåê", url="https://example.com")]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç:", reply_markup=markup)
